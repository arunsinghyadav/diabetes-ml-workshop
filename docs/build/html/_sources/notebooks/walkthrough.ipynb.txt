{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Building a Binary Classification Machine Learning Model To Predict Hospital Readmission in Patients with Diabetes\n",
    "\n",
    "In this tutorial, we'll be looking at hospital admission data in patients with diabetes. This dataset was collected from 130 hospitals in the United States from 1999 to 2008. More details can be found on the UCI Machine Learning Repository [website](https://archive.ics.uci.edu/ml/datasets/diabetes+130-us+hospitals+for+years+1999-2008)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Step 1: Importing Depedencies\n",
    "\n",
    "Before getting started, we'll need to import several packages. These include:\n",
    "\n",
    "- [pandas](https://pandas.pydata.org/pandas-docs/stable/) - a package for performing data analysis and manipulation\n",
    "- [numpy](https://docs.scipy.org/doc/numpy/) - a package for scientific computing \n",
    "- [matplotlib](https://matplotlib.org/) - the standard Python plotting package\n",
    "- [seaborn](https://seaborn.pydata.org/) - a dataframe-centric visualization package that is built off of **matplotlib**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.7/site-packages/matplotlib/__init__.py:886: MatplotlibDeprecationWarning: \n",
      "examples.directory is deprecated; in the future, examples will be found relative to the 'datapath' directory.\n",
      "  \"found relative to the 'datapath' directory.\".format(key))\n"
     ]
    }
   ],
   "source": [
    "import os \n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Step 2: Load the Data\n",
    "\n",
    "We will be loading in the data as a pandas DataFrame.\n",
    "\n",
    "The data is stored in a csv file. We'll import this data using a pandas method called `read_csv`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "data = pd.read_csv(\"patient_data.csv\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To get a glimpse of our data, we can use either the `head()`, which shows the first 5 rows of the dataframe."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>encounter_id</th>\n",
       "      <th>patient_nbr</th>\n",
       "      <th>race</th>\n",
       "      <th>gender</th>\n",
       "      <th>age</th>\n",
       "      <th>weight</th>\n",
       "      <th>admission_type_id</th>\n",
       "      <th>admission_source_id</th>\n",
       "      <th>time_in_hospital</th>\n",
       "      <th>medical_specialty</th>\n",
       "      <th>...</th>\n",
       "      <th>examide</th>\n",
       "      <th>citoglipton</th>\n",
       "      <th>insulin</th>\n",
       "      <th>glyburide-metformin</th>\n",
       "      <th>glipizide-metformin</th>\n",
       "      <th>glimepiride-pioglitazone</th>\n",
       "      <th>metformin-rosiglitazone</th>\n",
       "      <th>metformin-pioglitazone</th>\n",
       "      <th>diabetesMed</th>\n",
       "      <th>readmitted</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2278392</td>\n",
       "      <td>8222157</td>\n",
       "      <td>Caucasian</td>\n",
       "      <td>Female</td>\n",
       "      <td>[0-10)</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Pediatrics-Endocrinology</td>\n",
       "      <td>...</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>NO</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>149190</td>\n",
       "      <td>55629189</td>\n",
       "      <td>Caucasian</td>\n",
       "      <td>Female</td>\n",
       "      <td>[10-20)</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "      <td>7</td>\n",
       "      <td>3</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Up</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>&gt;30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>64410</td>\n",
       "      <td>86047875</td>\n",
       "      <td>AfricanAmerican</td>\n",
       "      <td>Female</td>\n",
       "      <td>[20-30)</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "      <td>7</td>\n",
       "      <td>2</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>NO</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>500364</td>\n",
       "      <td>82442376</td>\n",
       "      <td>Caucasian</td>\n",
       "      <td>Male</td>\n",
       "      <td>[30-40)</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "      <td>7</td>\n",
       "      <td>2</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Up</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>NO</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>16680</td>\n",
       "      <td>42519267</td>\n",
       "      <td>Caucasian</td>\n",
       "      <td>Male</td>\n",
       "      <td>[40-50)</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Steady</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>NO</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 44 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   encounter_id  patient_nbr             race  gender      age weight  \\\n",
       "0       2278392      8222157        Caucasian  Female   [0-10)    NaN   \n",
       "1        149190     55629189        Caucasian  Female  [10-20)    NaN   \n",
       "2         64410     86047875  AfricanAmerican  Female  [20-30)    NaN   \n",
       "3        500364     82442376        Caucasian    Male  [30-40)    NaN   \n",
       "4         16680     42519267        Caucasian    Male  [40-50)    NaN   \n",
       "\n",
       "   admission_type_id  admission_source_id  time_in_hospital  \\\n",
       "0                  6                    1                 1   \n",
       "1                  1                    7                 3   \n",
       "2                  1                    7                 2   \n",
       "3                  1                    7                 2   \n",
       "4                  1                    7                 1   \n",
       "\n",
       "          medical_specialty    ...      examide  citoglipton  insulin  \\\n",
       "0  Pediatrics-Endocrinology    ...           No           No       No   \n",
       "1                       NaN    ...           No           No       Up   \n",
       "2                       NaN    ...           No           No       No   \n",
       "3                       NaN    ...           No           No       Up   \n",
       "4                       NaN    ...           No           No   Steady   \n",
       "\n",
       "   glyburide-metformin  glipizide-metformin  glimepiride-pioglitazone  \\\n",
       "0                   No                   No                        No   \n",
       "1                   No                   No                        No   \n",
       "2                   No                   No                        No   \n",
       "3                   No                   No                        No   \n",
       "4                   No                   No                        No   \n",
       "\n",
       "   metformin-rosiglitazone metformin-pioglitazone diabetesMed readmitted  \n",
       "0                       No                     No          No         NO  \n",
       "1                       No                     No         Yes        >30  \n",
       "2                       No                     No         Yes         NO  \n",
       "3                       No                     No         Yes         NO  \n",
       "4                       No                     No         Yes         NO  \n",
       "\n",
       "[5 rows x 44 columns]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### How many rows and columns are in our dataset?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(101766, 44)"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Our dataset has 101,766 rows and 45 columns. Each row represents a unique hospital admission. Columns represent patient demographics, medical details, and admission-specific information such as length of stay (`time_in_hospital`). We can see a list of all columns by applying `.columns` to our dataframe."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Columns: ['encounter_id', 'patient_nbr', 'race', 'gender', 'age', 'weight', 'admission_type_id', 'admission_source_id', 'time_in_hospital', 'medical_specialty', 'num_lab_procedures', 'num_procedures', 'num_medications', 'number_outpatient', 'number_emergency', 'number_inpatient', 'number_diagnoses', 'max_glu_serum', 'A1Cresult', 'metformin', 'repaglinide', 'nateglinide', 'chlorpropamide', 'glimepiride', 'acetohexamide', 'glipizide', 'glyburide', 'tolbutamide', 'pioglitazone', 'rosiglitazone', 'acarbose', 'miglitol', 'troglitazone', 'tolazamide', 'examide', 'citoglipton', 'insulin', 'glyburide-metformin', 'glipizide-metformin', 'glimepiride-pioglitazone', 'metformin-rosiglitazone', 'metformin-pioglitazone', 'diabetesMed', 'readmitted']\n"
     ]
    }
   ],
   "source": [
    "print(f\"Columns: {data.columns.tolist()}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Looking at the columns, we can see that a large proportion are medication names. Let's store these column names as a separate list, which we'll get back to in a bit."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "There are 23 medications represented as columns in the dataset.\n"
     ]
    }
   ],
   "source": [
    "medications = ['metformin', 'repaglinide', 'nateglinide', 'chlorpropamide', 'glimepiride', \n",
    "    'acetohexamide', 'glipizide', 'glyburide', 'tolbutamide', 'pioglitazone', \n",
    "    'rosiglitazone', 'acarbose', 'miglitol', 'troglitazone', 'tolazamide', \n",
    "    'examide', 'citoglipton', 'insulin', 'glyburide-metformin', 'glipizide-metformin',\n",
    "    'glimepiride-pioglitazone', 'metformin-rosiglitazone', 'metformin-pioglitazone']\n",
    "\n",
    "print(f\"There are {len(medications)} medications represented as columns in the dataset.\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### How many hospital admissions and unique patients are in the dataset? "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of hospital admissions: 101,766\n",
      "Number of unique patients: 71,518\n"
     ]
    }
   ],
   "source": [
    "n_admissions = data['encounter_id'].nunique()\n",
    "n_patients = data['patient_nbr'].nunique()\n",
    "\n",
    "print(f\"Number of hospital admissions: {n_admissions:,}\")\n",
    "print(f\"Number of unique patients: {n_patients:,}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### How many patients have had more than one hospital admission?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "admissions_per_patient = data['patient_nbr'].value_counts().reset_index()\n",
    "admissions_per_patient.columns = ['patient_nbr', 'count']\n",
    "multiple_admissions = admissions_per_patient[admissions_per_patient['count'] > 1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Proportion of patients that have multiple admissions: 23.45%\n",
      "Maximum number of admissions for a given patient: 40\n"
     ]
    }
   ],
   "source": [
    "print(f\"Proportion of patients that have multiple admissions: {multiple_admissions['patient_nbr'].nunique()/n_patients:.2%}\")\n",
    "print(f\"Maximum number of admissions for a given patient: {multiple_admissions['count'].max()}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Almost one-quarter of the patients have had more than 1 hosptial admission. The maximum number of hospital admissions for a given patient is 40. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Step 3: Data Cleaning\n",
    "\n",
    "Data cleaning is a crucial step in the machine learning pipeline, and typically requires the most time and effort."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### i) Decoding the identifier columns\n",
    "\n",
    "There are 2 columns in our dataset which represent ID's that link to descriptors in separate files: \n",
    "\n",
    "1. `admission_type_id`\n",
    "2. `admission_source_id`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>admission_type_id</th>\n",
       "      <th>admission_source_id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   admission_type_id  admission_source_id\n",
       "0                  6                    1\n",
       "1                  1                    7\n",
       "2                  1                    7\n",
       "3                  1                    7\n",
       "4                  1                    7"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data[['admission_type_id', 'admission_source_id']].head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We'll update these 2 columns so that they represent the descriptor name instead of simply the id number.\n",
    "\n",
    "Our mapper files are located in `data/id_mappers/` as shown below."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['data/id_mappers/admission_source_id.csv',\n",
       " 'data/id_mappers/admission_type_id.csv']"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import glob\n",
    "\n",
    "glob.glob('data/id_mappers/*.csv')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Decoding  `admission_type_id`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>admission_type_id</th>\n",
       "      <th>description</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>Emergency</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>Urgent</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>Elective</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>Newborn</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>Not Available</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>6</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>7</td>\n",
       "      <td>Trauma Center</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>8</td>\n",
       "      <td>Not Mapped</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   admission_type_id    description\n",
       "0                  1      Emergency\n",
       "1                  2         Urgent\n",
       "2                  3       Elective\n",
       "3                  4        Newborn\n",
       "4                  5  Not Available\n",
       "5                  6            NaN\n",
       "6                  7  Trauma Center\n",
       "7                  8     Not Mapped"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "admission_type = pd.read_csv(\"data/id_mappers/admission_type_id.csv\")\n",
    "admission_type"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can see that the admission type mapper file has 3 values which represent missing data:\n",
    "\n",
    "1. NaN\n",
    "2. 'Not Mapped'\n",
    "3. 'Not Available'\n",
    "\n",
    "Let's collapse these into one category that represents a missing value. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "missing_values = ['nan', 'Not Available', 'Not Mapped']\n",
    "admission_type['description'] = admission_type['description'].replace(missing_values, np.nan)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{0: 'Emergency',\n",
       " 1: 'Urgent',\n",
       " 2: 'Elective',\n",
       " 3: 'Newborn',\n",
       " 4: nan,\n",
       " 5: nan,\n",
       " 6: 'Trauma Center',\n",
       " 7: nan}"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "admission_type_mapper = admission_type.to_dict()['description']\n",
    "admission_type_mapper"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now that we have a \"clean\" mapper, we can apply it to our dataset. We can use [pandas.Series.map](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.map.html) to map `admission_type_id` values in our original dataframe to the descriptors in our `admission_type_mapper` dictionary."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>admission_type</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Trauma Center</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Urgent</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Urgent</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Urgent</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Urgent</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  admission_type\n",
       "0  Trauma Center\n",
       "1         Urgent\n",
       "2         Urgent\n",
       "3         Urgent\n",
       "4         Urgent"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data['admission_type'] = data['admission_type_id'].map(admission_type_mapper)\n",
    "data[['admission_type']].head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Decoding  `admission_source_id`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(25, 2)"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "admission_source = pd.read_csv(\"data/id_mappers/admission_source_id.csv\")\n",
    "admission_source.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "There are significantly more ID's represented in the `admission_source_id.csv` file as compared to `admission_type_id.csv`. Let's take a look at the list of all descriptions."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['Physician Referral',\n",
       " 'Clinic Referral',\n",
       " 'HMO Referral',\n",
       " 'Transfer from a hospital',\n",
       " 'Transfer from a Skilled Nursing Facility (SNF)',\n",
       " 'Transfer from another health care facility',\n",
       " 'Emergency Room',\n",
       " 'Court/Law Enforcement',\n",
       " 'Not Available',\n",
       " 'Transfer from critial access hospital',\n",
       " 'Normal Delivery',\n",
       " 'Premature Delivery',\n",
       " 'Sick Baby',\n",
       " 'Extramural Birth',\n",
       " 'Not Available',\n",
       " nan,\n",
       " 'Transfer From Another Home Health Agency',\n",
       " 'Readmission to Same Home Health Agency',\n",
       " 'Not Mapped',\n",
       " 'Unknown/Invalid',\n",
       " 'Transfer from hospital inpt/same fac reslt in a sep claim',\n",
       " 'Born inside this hospital',\n",
       " 'Born outside this hospital',\n",
       " 'Transfer from Ambulatory Surgery Center',\n",
       " 'Transfer from Hospice']"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "admission_source['description'].tolist()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Here, we can see that there are 4 missing values:\n",
    "\n",
    "- 'Not Available' \n",
    "- 'Unknown/Invalid'\n",
    "- 'Not Mapped'\n",
    "- 'nan'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "missing_values = ['nan', 'Not Available', 'Not Mapped', 'Unknown/Invalid']\n",
    "admission_source['description'] = admission_source['description'].replace(missing_values, np.nan)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "There are also a couple of overlapping themes in admission source descriptions. For example, `'Physician Referral'`, `'Clinic Referral'`, and `'HMO Referral'` can be grouped as `Referral`. Let's do this now using pandas' replace() method."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "referrals = ['Physician Referral', 'Clinic Referral', 'HMO Referral']\n",
    "admission_source['description'] = admission_source['description'].replace(referrals, 'Referral')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can also group transfer-related admission sources into a single description called `Transfer`. There are 8 admission sources that include `'Transfer'`. Instead of going through the list and selecting these manually, we're going to use pandas.Series's [contains()](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.str.contains.html) method to filter out admission source descriptions that contain the string `'Transfer'`. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>admission_source_id</th>\n",
       "      <th>description</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>Transfer from a hospital</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>Transfer from a Skilled Nursing Facility (SNF)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>6</td>\n",
       "      <td>Transfer from another health care facility</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>10</td>\n",
       "      <td>Transfer from critial access hospital</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>18</td>\n",
       "      <td>Transfer From Another Home Health Agency</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>22</td>\n",
       "      <td>Transfer from hospital inpt/same fac reslt in ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>25</td>\n",
       "      <td>Transfer from Ambulatory Surgery Center</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>26</td>\n",
       "      <td>Transfer from Hospice</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    admission_source_id                                        description\n",
       "3                     4                           Transfer from a hospital\n",
       "4                     5     Transfer from a Skilled Nursing Facility (SNF)\n",
       "5                     6         Transfer from another health care facility\n",
       "9                    10              Transfer from critial access hospital\n",
       "16                   18           Transfer From Another Home Health Agency\n",
       "20                   22  Transfer from hospital inpt/same fac reslt in ...\n",
       "23                   25            Transfer from Ambulatory Surgery Center\n",
       "24                   26                              Transfer from Hospice"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "transfers = admission_source[admission_source['description'].str.contains('Transfer').fillna(False)]\n",
    "transfers"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's generate a list of all transfer-related admission source descriptions."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['Transfer from a hospital',\n",
       " 'Transfer from a Skilled Nursing Facility (SNF)',\n",
       " 'Transfer from another health care facility',\n",
       " 'Transfer from critial access hospital',\n",
       " 'Transfer From Another Home Health Agency',\n",
       " 'Transfer from hospital inpt/same fac reslt in a sep claim',\n",
       " 'Transfer from Ambulatory Surgery Center',\n",
       " 'Transfer from Hospice']"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "transfers = transfers['description'].tolist()\n",
    "transfers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "admission_source['description'] = admission_source['description'].replace(transfers, 'Transfer')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's now convert this into a dictionary."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{0: 'Referral',\n",
       " 1: 'Referral',\n",
       " 2: 'Referral',\n",
       " 3: 'Transfer',\n",
       " 4: 'Transfer',\n",
       " 5: 'Transfer',\n",
       " 6: 'Emergency Room',\n",
       " 7: 'Court/Law Enforcement',\n",
       " 8: nan,\n",
       " 9: 'Transfer',\n",
       " 10: 'Normal Delivery',\n",
       " 11: 'Premature Delivery',\n",
       " 12: 'Sick Baby',\n",
       " 13: 'Extramural Birth',\n",
       " 14: nan,\n",
       " 15: nan,\n",
       " 16: 'Transfer',\n",
       " 17: 'Readmission to Same Home Health Agency',\n",
       " 18: nan,\n",
       " 19: nan,\n",
       " 20: 'Transfer',\n",
       " 21: 'Born inside this hospital',\n",
       " 22: 'Born outside this hospital',\n",
       " 23: 'Transfer',\n",
       " 24: 'Transfer'}"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "admission_source_mapper = admission_source.to_dict()['description']\n",
    "admission_source_mapper"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we can apply this mapper to the admission_source_id column in our original dataset."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>admission_source</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Referral</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Court/Law Enforcement</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Court/Law Enforcement</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Court/Law Enforcement</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Court/Law Enforcement</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        admission_source\n",
       "0               Referral\n",
       "1  Court/Law Enforcement\n",
       "2  Court/Law Enforcement\n",
       "3  Court/Law Enforcement\n",
       "4  Court/Law Enforcement"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data['admission_source'] = data['admission_source_id'].map(admission_source_mapper)\n",
    "data[['admission_source']].head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### ii) Converting Medication Features From Categorical to Boolean"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Remember that list of medications we created when we loaded in the data in Step 1?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Remember that list of medications we created when we loaded in the data in Step 1? We're going revisit this and convert these features to boolean variables."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "No        81778\n",
       "Steady    18346\n",
       "Up         1067\n",
       "Down        575\n",
       "Name: metformin, dtype: int64"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data[medications[0]].value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Medication columns are currently categorical datatypes that have several possible categories including:\n",
    "\n",
    "- \"No\" (not taking the medication)\n",
    "- \"Up\" (increased medication dose)\n",
    "- \"Down\" (decrease medication dose)\n",
    "- \"Steady\" (no changes in dose)\n",
    "\n",
    "To keep things simple, we'll update the column to \"0\" (not taking the medication) to \"1\" (taking the medication). We're losing out on information regarding their dose change, but it's a compromise we're willing to make to simplify our dataset.\n",
    "\n",
    "We can use [numpy.where](https://docs.scipy.org/doc/numpy/reference/generated/numpy.where.html) to "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "for m in medications:\n",
    "    data[f'{m}_bool'] = np.where(data[m]=='No', 0, 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "counts = []\n",
    "\n",
    "for m in medications:\n",
    "    counts.append(data[f'{m}_bool'].sum()/len(data))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>meds</th>\n",
       "      <th>counts</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>metformin</td>\n",
       "      <td>0.196411</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>repaglinide</td>\n",
       "      <td>0.015123</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>nateglinide</td>\n",
       "      <td>0.006908</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>chlorpropamide</td>\n",
       "      <td>0.000845</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>glimepiride</td>\n",
       "      <td>0.051009</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>acetohexamide</td>\n",
       "      <td>0.000010</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>glipizide</td>\n",
       "      <td>0.124659</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>glyburide</td>\n",
       "      <td>0.104652</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>tolbutamide</td>\n",
       "      <td>0.000226</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>pioglitazone</td>\n",
       "      <td>0.072008</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>rosiglitazone</td>\n",
       "      <td>0.062545</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>acarbose</td>\n",
       "      <td>0.003027</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>miglitol</td>\n",
       "      <td>0.000373</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>troglitazone</td>\n",
       "      <td>0.000029</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>tolazamide</td>\n",
       "      <td>0.000383</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>examide</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>citoglipton</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>insulin</td>\n",
       "      <td>0.534393</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>glyburide-metformin</td>\n",
       "      <td>0.006937</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>glipizide-metformin</td>\n",
       "      <td>0.000128</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>glimepiride-pioglitazone</td>\n",
       "      <td>0.000010</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>metformin-rosiglitazone</td>\n",
       "      <td>0.000020</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>metformin-pioglitazone</td>\n",
       "      <td>0.000010</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                        meds    counts\n",
       "0                  metformin  0.196411\n",
       "1                repaglinide  0.015123\n",
       "2                nateglinide  0.006908\n",
       "3             chlorpropamide  0.000845\n",
       "4                glimepiride  0.051009\n",
       "5              acetohexamide  0.000010\n",
       "6                  glipizide  0.124659\n",
       "7                  glyburide  0.104652\n",
       "8                tolbutamide  0.000226\n",
       "9               pioglitazone  0.072008\n",
       "10             rosiglitazone  0.062545\n",
       "11                  acarbose  0.003027\n",
       "12                  miglitol  0.000373\n",
       "13              troglitazone  0.000029\n",
       "14                tolazamide  0.000383\n",
       "15                   examide  0.000000\n",
       "16               citoglipton  0.000000\n",
       "17                   insulin  0.534393\n",
       "18       glyburide-metformin  0.006937\n",
       "19       glipizide-metformin  0.000128\n",
       "20  glimepiride-pioglitazone  0.000010\n",
       "21   metformin-rosiglitazone  0.000020\n",
       "22    metformin-pioglitazone  0.000010"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "medication_counts = pd.DataFrame({'meds': medications, 'counts':counts})\n",
    "\n",
    "medication_counts"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "from utils import get_mesh_from_drug_name\n",
    "\n",
    "from tqdm import tqdm\n",
    "\n",
    "med_mesh = dict()\n",
    "for m in medications:\n",
    "    med_mesh[m] = get_mesh_from_drug_name(m)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'metformin': ['Hypoglycemic Agents'],\n",
       " 'repaglinide': ['Hypoglycemic Agents'],\n",
       " 'nateglinide': ['Hypoglycemic Agents'],\n",
       " 'chlorpropamide': ['Hypoglycemic Agents'],\n",
       " 'glimepiride': ['Anti-Arrhythmia Agents',\n",
       "  'Immunosuppressive Agents',\n",
       "  'Hypoglycemic Agents'],\n",
       " 'acetohexamide': ['Hypoglycemic Agents'],\n",
       " 'glipizide': ['Hypoglycemic Agents'],\n",
       " 'glyburide': ['Hypoglycemic Agents'],\n",
       " 'tolbutamide': ['Hypoglycemic Agents'],\n",
       " 'pioglitazone': ['Hypoglycemic Agents'],\n",
       " 'rosiglitazone': ['Hypoglycemic Agents'],\n",
       " 'acarbose': ['Glycoside Hydrolase Inhibitors'],\n",
       " 'miglitol': ['Enzyme Inhibitors',\n",
       "  'Hypoglycemic Agents',\n",
       "  'Glycoside Hydrolase Inhibitors'],\n",
       " 'troglitazone': ['Hypoglycemic Agents'],\n",
       " 'tolazamide': ['Hypoglycemic Agents'],\n",
       " 'examide': [],\n",
       " 'citoglipton': [],\n",
       " 'insulin': [],\n",
       " 'glyburide-metformin': ['Hypoglycemic Agents'],\n",
       " 'glipizide-metformin': ['Hypoglycemic Agents'],\n",
       " 'glimepiride-pioglitazone': ['Anti-Arrhythmia Agents',\n",
       "  'Immunosuppressive Agents',\n",
       "  'Hypoglycemic Agents'],\n",
       " 'metformin-rosiglitazone': ['Hypoglycemic Agents'],\n",
       " 'metformin-pioglitazone': ['Hypoglycemic Agents']}"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "med_mesh"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "MeSH terms are a type of \"tag\" that describes a medical term. We used RxNav's API to further investigate which MeSH terms are assocaited with our list of medications. The results show that all medications have a single MeSH term, [hypoglycemic agent](https://en.wikipedia.org/wiki/Anti-diabetic_medication), which means it's an anti-diabetic medication."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### iii) Creating a Boolean Target Variable"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "NO     54864\n",
       ">30    35545\n",
       "<30    11357\n",
       "Name: readmitted, dtype: int64"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data['readmitted'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "data['readmitted_bool'] = np.where(data['readmitted']=='NO', 0, 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    54864\n",
       "1    46902\n",
       "Name: readmitted_bool, dtype: int64"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data['readmitted_bool'].value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Step 4: Data Exploration and Visualization"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Assessing Missing Values\n",
    "\n",
    "To get a better sense of the missing values in our data, let's visualize it using [missingno](https://github.com/ResidentMario/missingno)'s \"nullity\" matrix."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x102ff1b70>"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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7x0AGA1G2QAAKd11111Jrnv++ecnue5cUMxDw5gxDwAAAABptVIHAAAAAACAJlHMAwAAAABAhYyyAQAAAACgsM9//vNx7733RqvViizLZm5bHrdarTjhhBNSxxxpinkAAAAAAApbuHBhvPSlL00do9YU89Aw7XY7Nm7cmDoGAAAAADX1i1/8Im6++eaZx3mez3qfZ6eYh4bp9XoxMTEx8PMnJyeHmAYAAACAujn//PPjW9/6VuoYtaaYh4axYh4AAACAMs4777y48cYbt/pdlmVbPf7oRz9aZaTaUcxDw1gxDwAAAEAZ3/rWt+K6665LHaPWFPMAAAAAABT2V3/1V0mue88990SWZc9623PPPWPnnXdOkm1HKeYBAAAAACjsggsuiL/4i7+o/Lp/9md/1vf4zjvvHLfccktFacpRzANQqbLjlCKMVAIAAICUUpTyERH77LNP5HkeERF5nsf09HRExMzPP/3TP02SaxCK+QYb1iagvV6vfBigMfyzBwAAABjElVdemTrC0CjmG8yqVQAAAABgR73whS+M++67L3WMWlPMQ8MMa7UyDMqHggAAAFBv//iP/7jdczqdTgVJ6ksxDw1TthRViFKWUTYAAABQb7fffnucddZZqWPUWit1AAAAAAAA6kMpX54V8wAAAAAAFHbVVVfFX/7lX271uyzLIs/zmfv/9m//liBZfSjmAQAAAAAo7CUveUlcc801fc8xY74/xTwAAAAAAIVdeeWV8ZGPfCR1jFozYx4AAAAAgMKWLFmSOkLtWTEPQKV6vV5MTEyUeo3JyckhpQEAAAB21PLly+M3f/M3Zx5nWRZZls3cj4hYs2ZNkmx1oZiHhmm327Fx48bUMWiwYb0He71e+TAAAADADjv55JPj/vvvr/y625tbf8opp8Sb3/zmitKUo5iHhim7WtlKZQAAAIBmS1HKF3HVVVfVppg3Yx4AAAAAgMLWrVuXOsKsDj744NQRCrNiHhrGKBsAAAAAyli2bFksW7as7znbGzsziG63O/TXTEUxDw1jlA0AAAAAZdx0003x7ne/u/LrXnrppX2Pr1ixIl72spdVlKYcxTwAhY2Pj5d6/uTkZLTb7eGEAYAG8w1IACClFKV8RMTNN9+83eN1WVWvmAegMCUAAIyGYXxYDgAwqH333Te+//3vV37dtWvXzvr7LMsiImLp0qVVxilF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\n",
      "text/plain": [
       "<Figure size 1800x720 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import missingno as msno\n",
    "\n",
    "msno.matrix(data)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The data-dense columns are fully black, while the sparse columns (with missing values) have a mixture of white and black. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Looking at Patient Demographics: Age and Gender"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1008x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(14,4))\n",
    "plt.subplot(1,2,1)\n",
    "sns.countplot(x='age', data=data, palette='viridis')\n",
    "plt.title(\"Distribution of Age\")\n",
    "\n",
    "plt.subplot(1,2,2)\n",
    "sns.countplot(data['gender'], palette='viridis')\n",
    "plt.title(\"Distribution of Gender\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Female    0.537602\n",
       "Male      0.462398\n",
       "Name: gender, dtype: float64"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data['gender'].value_counts(normalize=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### How long were hospital stays for a given admission?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(8,6))\n",
    "sns.countplot(data['time_in_hospital'], palette='viridis')\n",
    "plt.xlabel(\"time in hospital (days)\")\n",
    "plt.title(\"Length of Hospital Stay\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean time in hospital: 4.40\n"
     ]
    }
   ],
   "source": [
    "print(f\"Mean time in hospital: {data['time_in_hospital'].mean():.2f}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Number of Diagnoses, Procedures, Medications"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.7/site-packages/scipy/stats/stats.py:1713: FutureWarning: Using a non-tuple sequence for multidimensional indexing is deprecated; use `arr[tuple(seq)]` instead of `arr[seq]`. In the future this will be interpreted as an array index, `arr[np.array(seq)]`, which will result either in an error or a different result.\n",
      "  return np.add.reduce(sorted[indexer] * weights, axis=axis) / sumval\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Number of Lab Procedures, mean: 43.10')"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1008x360 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(14,5))\n",
    "\n",
    "plt.subplot(1,2,1)\n",
    "sns.kdeplot(data['num_medications'], shade=True)\n",
    "plt.title(f\"Number of Medications, mean: {data['num_medications'].mean():.2f}\")\n",
    "\n",
    "plt.subplot(1,2,2)\n",
    "sns.kdeplot(data['num_lab_procedures'], shade=True)\n",
    "plt.title(f\"Number of Lab Procedures, mean: {data['num_lab_procedures'].mean():.2f}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### What was the most common medical specialty?\n",
    "\n",
    "Medical specialty of attending physician."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>specialty</th>\n",
       "      <th>count</th>\n",
       "      <th>prevalence</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>InternalMedicine</td>\n",
       "      <td>14635</td>\n",
       "      <td>0.143810</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Emergency/Trauma</td>\n",
       "      <td>7565</td>\n",
       "      <td>0.074337</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Family/GeneralPractice</td>\n",
       "      <td>7440</td>\n",
       "      <td>0.073109</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Cardiology</td>\n",
       "      <td>5352</td>\n",
       "      <td>0.052591</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Surgery-General</td>\n",
       "      <td>3099</td>\n",
       "      <td>0.030452</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Nephrology</td>\n",
       "      <td>1613</td>\n",
       "      <td>0.015850</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Orthopedics</td>\n",
       "      <td>1400</td>\n",
       "      <td>0.013757</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Orthopedics-Reconstructive</td>\n",
       "      <td>1233</td>\n",
       "      <td>0.012116</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Radiologist</td>\n",
       "      <td>1140</td>\n",
       "      <td>0.011202</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Pulmonology</td>\n",
       "      <td>871</td>\n",
       "      <td>0.008559</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                    specialty  count  prevalence\n",
       "0            InternalMedicine  14635    0.143810\n",
       "1            Emergency/Trauma   7565    0.074337\n",
       "2      Family/GeneralPractice   7440    0.073109\n",
       "3                  Cardiology   5352    0.052591\n",
       "4             Surgery-General   3099    0.030452\n",
       "5                  Nephrology   1613    0.015850\n",
       "6                 Orthopedics   1400    0.013757\n",
       "7  Orthopedics-Reconstructive   1233    0.012116\n",
       "8                 Radiologist   1140    0.011202\n",
       "9                 Pulmonology    871    0.008559"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "medical_specialties = data['medical_specialty'].value_counts().reset_index()\n",
    "medical_specialties.columns = ['specialty', 'count']\n",
    "medical_specialties['prevalence'] = medical_specialties['count']/len(data)\n",
    "\n",
    "medical_specialties.head(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Medications"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "No        101680\n",
       "Steady        79\n",
       "Up             6\n",
       "Down           1\n",
       "Name: chlorpropamide, dtype: int64"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data[medications[3]].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1    78363\n",
       "0    23403\n",
       "Name: diabetesMed, dtype: int64"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data['diabetesMed'] = data['diabetesMed'].map({'Yes': 1, 'No':0})\n",
    "data['diabetesMed'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       ">8      8216\n",
       "Norm    4990\n",
       ">7      3812\n",
       "Name: A1Cresult, dtype: int64"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data['A1Cresult'].value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Step 5: Feature Selection"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Talk about the importance of feature selection / feature engineering."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Step 6: Building the Binary Classification ML Model"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "No Free Lunch Theorem!!!\n",
    "\n",
    "- Support Vector Machine\n",
    "- Random Forest Classifier\n",
    "- K-Neighbours\n",
    "- Logistic Regression\n",
    "- AdaBoost Classifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
